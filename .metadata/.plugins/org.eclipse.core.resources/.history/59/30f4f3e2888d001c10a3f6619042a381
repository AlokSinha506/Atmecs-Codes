package com.example.demo.serviceImpl;

import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.CoreMatchers.any;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;

import com.example.demo.exception.NotFoundException;
import com.example.demo.model.Employee;
import com.example.demo.model.EmployeeRequest;
import com.example.demo.model.EmployeeResponse;
import com.example.demo.model.EmployeeType;
import com.example.demo.model.Role;
import com.example.demo.repository.EmployeeRepository;
import com.example.demo.repository.RoleRepository;
import com.example.demo.service.EmployeeService;




public class EmployeeServiceImplTest {

	@InjectMocks 
	EmployeeServiceImpl employeeServiceImpl;
    
	EmployeeService service = Mockito.mock(EmployeeService.class);
	
	EmployeeService employeeService;
	@Mock
	EmployeeRepository employeeRepository;
	@Mock
    RoleRepository roleRepository;

	EmployeeResponse empResponse;
	@BeforeEach
	void setUp() throws Exception{
		MockitoAnnotations.initMocks(this);
		}

	 @Test
     final void saveEmployeeTest() {
         
		EmployeeRequest employeeRequest= new EmployeeRequest();
		employeeRequest.setEmployeeId("123");
		employeeRequest.setName("Alok");
		employeeRequest.setPassword("Asinha");
		employeeRequest.setRating(4.5f);
		employeeRequest.setSalary(5678l);
		employeeRequest.setType(EmployeeType.EMPLOYEE);
		Role role= roleRepository.findByRole("employee")
				.orElse(Role.builder().role("employee").build());
		Employee emp = Employee.builder()
				.name(employeeRequest.getName())
				.password(employeeRequest.getPassword())
				.salary(employeeRequest.getSalary())
				.rating(employeeRequest.getRating())
				.employeeId(employeeRequest.getEmployeeId())
				.roles(Arrays.asList(role))
				.build();
		 when(employeeRepository.save(emp)).thenReturn(emp);
		
	  
		 EmployeeResponse response = employeeServiceImpl.saveEmployee(employeeRequest);
		 //assertThat(emp.getId()).isGreaterThan(0);
		 assertEquals(123,response.getEmployeeId());
	 }			 
	 
}
