package com.example.demo.serviceImpl;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.util.Arrays;
import java.util.Optional;

import org.junit.jupiter.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.example.demo.exception.NotFoundException;
import com.example.demo.model.*;

import com.example.demo.repository.EmployeeRepository;
import com.example.demo.repository.HrRepository;
import com.example.demo.repository.ManagerRepository;
import com.example.demo.repository.RoleRepository;




public class EmployeeServiceImplTest {

	@InjectMocks 
	EmployeeServiceImpl employeeServiceImpl;
    @Mock
	EmployeeRepository employeeRepository;
	@Mock
	ManagerRepository managerRepository;
	@Mock
	HrRepository heRepository;
	@Mock
    RoleRepository roleRepository;
    @Mock
    PasswordEncoder passwordEncoder;
	EmployeeResponse empResponse;
	@BeforeEach
	void setUp() throws Exception{
		MockitoAnnotations.initMocks(this);
		}

	 @Test
     final void saveEmployeeTest() {
         
		EmployeeRequest employeeRequest= new EmployeeRequest();
		employeeRequest.setEmployeeId("123");
		employeeRequest.setName("Alok");
		employeeRequest.setPassword("Asinha");
		employeeRequest.setRating(4.5f);
		employeeRequest.setSalary(5678l);
		employeeRequest.setType(EmployeeType.EMPLOYEE);
		Role role= roleRepository.findByRole("employee")
				.orElse(Role.builder().role("employee").build());
		Employee emp = Employee.builder()
				.name(employeeRequest.getName())
				.password(employeeRequest.getPassword())
				.salary(employeeRequest.getSalary())
				.rating(employeeRequest.getRating())
				.employeeId(employeeRequest.getEmployeeId())
				.roles(Arrays.asList(role))
				.build();
		 when(employeeRepository.save(emp)).thenReturn(emp);	  
		 EmployeeResponse response = employeeServiceImpl.saveEmployee(employeeRequest);
				 assertEquals(123,response.getEmployeeId());
	 }			 
	 @Test
     final void saveEmployeeTest1() {
         
		EmployeeRequest employeeRequest= new EmployeeRequest();
		employeeRequest.setEmployeeId("345");
		employeeRequest.setName("Aman");
		employeeRequest.setPassword("Aman@123");
		employeeRequest.setRating(4.4f);
		employeeRequest.setSalary(3456l);
		employeeRequest.setType(EmployeeType.MANAGER);
		Role role= roleRepository.findByRole("manager")
				.orElse(Role.builder().role("manager").build());
		Manager manager= Manager.builder()
				.name(employeeRequest.getName())
				.password(employeeRequest.getPassword())
				.salary(employeeRequest.getSalary())
				.rating(employeeRequest.getRating())
				.employeeId(employeeRequest.getEmployeeId())
				.roles(Arrays.asList(role))
				.build();
		 when(employeeRepository.save(manager)).thenReturn(manager);	  
		 EmployeeResponse response = employeeServiceImpl.saveEmployee(employeeRequest);
				 assertEquals(123,response.getEmployeeId());
	 }			
	 
	 @Test
     final void saveEmployeeTest2() {
         
		EmployeeRequest employeeRequest= new EmployeeRequest();
		employeeRequest.setEmployeeId("567");
		employeeRequest.setName("Ajay");
		employeeRequest.setPassword("Ajay@123");
		employeeRequest.setRating(3.4f);
		employeeRequest.setSalary(4325l);
		employeeRequest.setType(EmployeeType.HR);
		Role role= roleRepository.findByRole("hr")
				.orElse(Role.builder().role("hr").build());
		Hr hr=Hr.builder()
				.name(employeeRequest.getName())
				.password(employeeRequest.getPassword())
				.salary(employeeRequest.getSalary())
				.rating(employeeRequest.getRating())
				.employeeId(employeeRequest.getEmployeeId())
				.roles(Arrays.asList(role))
				.build();
		 when(employeeRepository.save(hr)).thenReturn(hr);	  
		 EmployeeResponse response = employeeServiceImpl.saveEmployee(employeeRequest);
				 assertEquals(123,response.getEmployeeId());
	 }			
	 
	 
	 @Test
	    public void getEmployeeByIdTest() throws NotFoundException  {
		 EmployeeRequest employeeRequest= new EmployeeRequest();
		 employeeRequest.setEmployeeId("123");
			employeeRequest.setName("Alok");
			employeeRequest.setPassword("Asinha");
			employeeRequest.setRating(4.5f);
			employeeRequest.setSalary(5678l);
			employeeRequest.setType(EmployeeType.EMPLOYEE);
			String employeeId = "123";
			Employee emp = employeeRepository.findByEmployeeId(employeeId)
					.orElseThrow( ()-> new NotFoundException("Employee Id does not exist"));
			EmployeeResponse response= employeeServiceImpl.getEmployeeById(employeeId);
			assertEquals(123, response.getEmployeeId());
	 }

}
