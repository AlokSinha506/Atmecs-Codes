package com.example.demo.serviceImpl;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import java.util.Arrays;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.example.demo.exception.NotFoundException;
import com.example.demo.model.*;
import com.example.demo.repository.*;



public class EmployeeServiceImplTest {

	@InjectMocks 
	EmployeeServiceImpl employeeServiceImpl;
    @Mock
	EmployeeRepository employeeRepository;
	@Mock
	ManagerRepository managerRepository;
	@Mock
	HrRepository hrRepository;
	@Mock
    RoleRepository roleRepository;
    @Mock
    PasswordEncoder passwordEncoder;
	EmployeeResponse empResponse;
	@BeforeEach
	void setUp() throws Exception{
		MockitoAnnotations.initMocks(this);
		}

//	 @Test
//     final void saveEmployeeTest() {
//         
//		EmployeeRequest employeeRequest= new EmployeeRequest();
//		employeeRequest.setEmployeeId("123");
//		employeeRequest.setName("Alok");
//		employeeRequest.setPassword("Asinha");
//		employeeRequest.setRating(4.5f);
//		employeeRequest.setSalary(5678l);
//		employeeRequest.setType(EmployeeType.EMPLOYEE);
//		Role role= roleRepository.findByRole("employee")
//				.orElse(Role.builder().role("employee").build());
//		Employee emp = Employee.builder()
//				.name(employeeRequest.getName())
//				.password(employeeRequest.getPassword())
//				.salary(employeeRequest.getSalary())
//				.rating(employeeRequest.getRating())
//				.employeeId(employeeRequest.getEmployeeId())
//				.roles(Arrays.asList(role))
//				.build();
//		 when(employeeRepository.save(emp)).thenReturn(new Employee());	  
//		 EmployeeResponse response = employeeServiceImpl.saveEmployee(employeeRequest);
//				 assertEquals(123,response.getEmployeeId());
//	 }			 
//	 @Test
//     final void saveEmployeeTest1() {
//         
//		EmployeeRequest employeeRequest= new EmployeeRequest();
//		employeeRequest.setEmployeeId("345");
//		employeeRequest.setName("Aman");
//		employeeRequest.setPassword("Aman@123");
//		employeeRequest.setRating(4.4f);
//		employeeRequest.setSalary(3456l);
//		employeeRequest.setType(EmployeeType.MANAGER);
//		Role role= roleRepository.findByRole("manager")
//				.orElse(Role.builder().role("manager").build());
//		Manager manager= Manager.builder()
//				.name(employeeRequest.getName())
//				.password(employeeRequest.getPassword())
//				.salary(employeeRequest.getSalary())
//				.rating(employeeRequest.getRating())
//				.employeeId(employeeRequest.getEmployeeId())
//				.roles(Arrays.asList(role))
//				.build();
//		 when(managerRepository.save(manager)).thenReturn(manager);	  
//		 EmployeeResponse response = employeeServiceImpl.saveEmployee(employeeRequest);
//				 assertEquals(345,response.getEmployeeId());
//	 }			
//	 
//	 @Test
//     final void saveEmployeeTest2() {
//         
//		EmployeeRequest employeeRequest= new EmployeeRequest();
//		employeeRequest.setEmployeeId("567");
//		employeeRequest.setName("Ajay");
//		employeeRequest.setPassword("Ajay@123");
//		employeeRequest.setRating(3.4f);
//		employeeRequest.setSalary(4325l);
//		employeeRequest.setType(EmployeeType.HR);
//		Role role= roleRepository.findByRole("hr")
//				.orElse(Role.builder().role("hr").build());
//		Hr hr=Hr.builder()
//				.name(employeeRequest.getName())
//				.password(employeeRequest.getPassword())
//				.salary(employeeRequest.getSalary())
//				.rating(employeeRequest.getRating())
//				.employeeId(employeeRequest.getEmployeeId())
//				.roles(Arrays.asList(role))
//				.build();
//		 when(hrRepository.save(hr)).thenReturn(hr);	  
//		 EmployeeResponse response = employeeServiceImpl.saveEmployee(employeeRequest);
//				 assertEquals(567,response.getEmployeeId());
//	 }			
//	 
//	 
	 @Test
	    public void getEmployeeByIdTest() throws NotFoundException  {
		Employee employee= new Employee();
		employee.setName("Anuj");
		employee.setRating(7.9f);
		employee.setSalary(8768l);
		
			
			EmployeeResponse response= employeeServiceImpl.getEmployeeById("123");
			assertEquals(123, response.getEmployeeId());
	 }
      
      @Test
      public void getEmployeeByIdTest1() {
    	
 		Assertions.assertThrows(NotFoundException.class, ()->employeeServiceImpl.getEmployeeById("123"));
 		
    	  
       }
}
