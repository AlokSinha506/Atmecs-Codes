package com.example.demo.serviceImpl;

import java.util.List;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.exception.NotFoundException;
import com.example.demo.model.Employee;
import com.example.demo.model.EmployeeType;
import com.example.demo.model.Role;
import com.example.demo.model.Hr;
import com.example.demo.model.Manager;
import com.example.demo.repository.EmployeeRepository;
import com.example.demo.repository.HrRepository;
import com.example.demo.repository.ManagerRepository;
import com.example.demo.service.EmployeeService;
@Service
public class EmployeeServiceImpl implements EmployeeService {
	@Autowired
     private EmployeeRepository employeeRepository;
	@Autowired
     private ManagerRepository managerRepository;
	@Autowired
     private HrRepository hrRepository;
	
     private Role role;
     
     private EmployeeType employeeType;
     
     
	@Override
	public Employee saveEmployee(Employee employee) {
		List<Role> employeeRole=role.getRole();
		if(employeeRole.equals(employeeType.MANAGER)) {
			managerRepository.save(employee);
			employeeRepository.save(employee);
		}
		if(employeeRole.equals(employeeType.HR)) {
			hrRepository.save(employee);
			employeeRepository.save(employee);
		}else {
		employeeRepository.save(employee);
		}
	}

	

	@Override
	public Employee getEmployeeById(long id) {
		Optional<Employee> employee = employeeRepository.findById(id);
		if(employee.isPresent()) {
			return employee.get();
		}else {
			throw new NotFoundException("Employee","Id",id);
		}
	}

	@Override
	public Employee updateEmployee(Employee employee, long id) {
		 Employee existingEmployee= employeeRepository.findById(id).orElseThrow(
	    		  ()-> new NotFoundException("Employee","Id",id));
		
		 
		existingEmployee.setName(employee.getName());
	    
	     existingEmployee.setPassword(employee.getPassword());
	     existingEmployee.setRating(employee.getRating());
	     existingEmployee.setSalary(employee.getSalary());
	     
	     employeeRepository.save(existingEmployee);
		return existingEmployee;
	}

	@Override
	public void deleteEmployee(long id) {
		 employeeRepository.findById(id).orElseThrow(
	    		  ()-> new NotFoundException("Employee","Id",id));
		 
		employeeRepository.deleteById(id);
		
	}



	@Override
	public Employee updateRating(Employee employee,long id) {
		if(role.equals(employeeType.MANAGER)||(role.equals(employeeType.HR))){
			Employee employee1 = employeeRepository.findById(id).get();
			employee1.setRating(employee);
			employeeRepository.save(employee);
		
	}
	}

	@Override
	public Employee updateSalary(Employee employee, long id) {
		if(role.equals(employeeType.MANAGER)||(role.equals(employeeType.HR))){
			Employee employee2 = employeeRepository.findById(id).get();
			employee2.setSalary(employee);
			employeeRepository.save(employee);
			
		}
	}

}
